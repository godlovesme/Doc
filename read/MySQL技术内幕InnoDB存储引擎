笔记

书名 MySQL技术内幕 InnoDB存储引擎



第一章

1 mysql 体系结构和存储引擎

数据库：物理操作系统文件或其他形式文件类型的集合，例如frm，myd,myi,ibd

实例：mysql数据库后台线程以及一个共享内存区组成，数据库实例才是真正用于操作数据库文件的。


2 存储引擎是基于表的，而不是数据库


InnoDB 存储引擎

特点：行锁，外键，通过多版本 MVCC 获得高并发性能

4种隔离级别 https://www.cnblogs.com/huanongying/p/7021555.html

默认是 mysql默认的事务隔离级别为 repeatable-read  可以重复读


MyISAM 存储引擎

特点：不支持事务，表锁，支持全文引擎

由 myd文件和myi文件组成

myd 用来存放数据文件

myi 用来存放索引文件


Memory 存储引擎

特点： 存放在内存   默认使用哈希索引  支持表锁 并发性差


Archive 存储引擎

特点： 只支持 insert ，select,  使用zlib 算法将数据行（row） 压缩后存储,压缩比 一般可达1:10
非常适合存储归档数据，例如日志信息


Federated 存储引擎

特点： 不存数据，指向一台远程MYSQL数据库服务器上

Maria 存储引擎

特点：用来替代 MYSIAM ,支持缓存数据和索引文件，应用的行锁



显示当前数据库的引擎

SHOW ENGINES

显示版本

SELECT VERSION()


mysql 链接本质是tcp/IP 通信


第二章

InnoDB 后台进程

1 Master Thread 

负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性

2 IO Thread 

大量使用的 AIO 处理IO

1.0 版本
4 个线程

write read insert buffer log io thread

内存池

InnoDB 是基于磁盘存储，通常使用内存池来提高访问速度

缓冲池的配置
innodb_buffer_pool_size   
默认32 位  3G

show variables like 'innodb_buffer_pool_size'


缓冲池实例的个数

innodb_buffer_pool_instances

查看个数

show engine innodb status

内存的管理

LRU list  : 最近少使用的算法来管理。最频繁的在前端，最少的在尾端

加入了midpoint位置，读的新新页 ，放到这里


为了解决 什么时候添加到首部

使用 innodb_old_blocks_time 来设定时间

set global innodb_old_blocks_time = 1000;

在InnoDB 下称为 modpoint insertion strategy

可以由 innodb_old_blocks_pct 控制

查看

show variables lik "innodb_old_blocks_pct"


重做日志缓冲  redo log_buffer

额外内存池    innodb_additional_mem_pool_size

缓冲池 innodb_buffer_pool{

	数据页 data page
	索引页 index page
	插入缓冲 insert buffer
	锁信息 lock info
	自适应哈希信息
	数据字典

}

查看缓冲池 的运行状态

select POOL_ID,HIT_RATE,PAGES_MADE_YOUNG,PAGES_NOT_MADE_YOUNG
FROM information_schema.INNODB_BUFFER_POOL_STATS\G;


第三章  文件

参数文件： 在mysql实例启动时在那里找到的数据文件

日志文件： 错误日志，二进制日志文件，慢查询日志文件，查询日志文件

socket 文件： 当用unix 域套接字方式进行链接时需要的文件

pid 文件： mysql 实例的进程ID 文件

mysql 文件 表结构文件：用来放mysql表结构定义文件

存储引擎文件： 因为 mysql 表存储引擎的关系，每个存储引擎都会有自己的文件来保存各种数据。



参数文件：

启动时，按照 mysql--help | grep my.cnf  显示的文件 来加载


二进制日志： 记录更改的操作，不包括 select show

show master status\g;

慢日志

show variables like 'long_query_time'\g

show bariables like 'log_slow_queries'\g


获取执行时间最长10条sql

mysqldumpslow -s al -n 10 david.log


第四章  表

索引组织表

每张表都有个主键 （primary key） 如果创建表时没有显示地定义主键 则按照一下方式选择或创建主键

1 是否有非空的唯一索引（Unique not null） 如果有，则该列为主键

2 如果不符合 1 则自动创建 6 个字节大小的指针


逻辑存储结构


段（segment） <- 区（extent）<- 页（page）<- Row


第五章  索引与算法

索引太多，影响应用程序性能
索引太少，影响查询性能


Btree 树  分为【
	
	聚集索引 （按照每张表的主键 造一棵树，每张表只能有一个） 
	每个数据页通过一个 双向链表 来链接，查询优化倾向于该表，主键查询非常快

	辅助索引  （非聚集索引）

	都是高度平衡的
】


全文索引



哈希索引






































